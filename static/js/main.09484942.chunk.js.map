{"version":3,"sources":["componet/card/card.component.jsx","componet/card-list/card-list.component.jsx","componet/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","CardList","console","log","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGaA,G,kBAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,2BACtB,6BAAKL,EAAMI,QAAQE,YCFdC,EAAW,SAAAP,GAEpB,OADAQ,QAAQC,IAAIT,GACL,qBAAKC,UAAU,YAAf,SAECD,EAAMU,SAASC,KAAI,SAAAP,GAAO,OACtB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCDtBO,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBAAOb,UAAU,SACVc,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCkDNG,E,kDAxDX,WAAYjB,GAAQ,IAAD,8BACf,cAAMA,IAkCVc,aAAe,SAACI,GACZ,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAlCrC,EAAKC,MAAQ,CACTb,SAAU,GACVU,YAAa,IAJF,E,gEAaE,IAAD,OAChBI,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,+BAsBvC,MAE2BC,KAAKN,MAA9Bb,EAFF,EAEEA,SAAUU,EAFZ,EAEYA,YACXU,EAAmBpB,EAASqB,QAAO,SAAA3B,GAAO,OAAIA,EAAQE,KAAK0B,cAC5DC,SAASb,EAAYY,kBAE1B,OACI,sBAAK/B,UAAU,MAAf,UACI,kDACA,cAAC,EAAD,CACIY,YAAY,qBACZC,aAAce,KAAKf,eAEvB,cAAC,EAAD,CAAUJ,SAAUoB,W,GApDlBI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.09484942.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css'\r\n\r\nexport const Card = (props) => (\r\n    <div className='card-container'>\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}set=set2&size=180x180`}/>\r\n        <h1>{props.monster.name}</h1>\r\n    </div>\r\n)\r\n","import React from 'react';\r\nimport './card-list.styles.css'\r\nimport {Card} from '../card/card.component'\r\n\r\nexport const CardList = props => {\r\n    console.log(props);\r\n    return <div className='card-list'>\r\n        {\r\n            props.monsters.map(monster => (\r\n                <Card key={monster.id} monster={monster}/>\r\n            ))\r\n        }\r\n    </div>;\r\n}\r\n\r\n","import React from 'react';\r\nimport './search-box.styles.css';\r\n// functional components\r\n// -  no access  to state ;\r\n// -  no constructor ;\r\n// -  no internal state ;\r\n// - no access life cycle methods;\r\n// -  USED just to render something.\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input className='search'\r\n           type='search'\r\n           placeholder={placeholder}\r\n           onChange={handleChange}\r\n    />\r\n)\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport {CardList} from \"./componet/card-list/card-list.component\";\r\nimport {SearchBox} from \"./componet/search-box/search-box.component\";\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            monsters: [],\r\n            searchField: ''\r\n        }\r\n    // binding the function to propagate the class context (including state )  to the method\r\n    //    this.handleChange = this.handleChange.bind(this)\r\n        // ATTN. ! this way is not efficient because you would need to do it for each new method\r\n        // --> use ES6  feature --> arrow functions\r\n    }\r\n\r\n    /* Life cycle methods */\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => this.setState({monsters: users}));\r\n    }\r\n\r\n    /*\r\n    *\r\n    *  Property or Method : Handle change of the searchField attribute from the state.\r\n    *  @input synthetic event e\r\n    *\r\n    */\r\n\r\n /*   handleChange(e){\r\n      this.setState({searchField: e.target.value})\r\n        // - due to \"this\" it goes to error because it is not defined;\r\n        // - due to JS way the function scope is not defined;\r\n        // - to fix this ypu need to bind it in the constructor but a better way it to use arrow function because this will propagate\r\n        // the state\r\n\r\n    }*/\r\n\r\n    handleChange = (e) => {\r\n        this.setState({searchField: e.target.value})\r\n    }\r\n    render() {\r\n        // destructuring the state , get the monsters and searchField\r\n        const {monsters, searchField} = this.state;\r\n        const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase()\r\n            .includes(searchField.toLowerCase()));\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <h1>Monsters Rolodex</h1>\r\n                <SearchBox\r\n                    placeholder=\"Search monster ...\"\r\n                    handleChange={this.handleChange}\r\n                />\r\n                <CardList monsters={filteredMonsters}/>\r\n            </div>)\r\n    }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}